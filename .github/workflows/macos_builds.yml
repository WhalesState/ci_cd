name: üçé macOS Builds
on:
  workflow_call:
    inputs:
      build_sha:
        description: "Build commit SHA to use for this job"
        required: true
        type: string
      runner_id:
        description: "Runner ID of the Parent Runner"
        required: true
        type: string
      new_major:
        description: "New Major # for Version"
        required: true
        type: string
      new_minor:
        description: "New Minor # for Version"
        required: true
        type: string
      new_patch:
        description: "New Patch # for Version"
        required: true
        type: string
      new_version:
        description: "New Version that'll be Deployed"
        required: true
        type: string

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: blazium-dev
  SCONSFLAGS: verbose=yes warnings=no progress=no
  DEPLOY_TYPE: macos

concurrency:
  group: ci-${{github.actor}}-${{ github.event.client_payload.type || 'nightly' }}-macos
  cancel-in-progress: true

jobs:

  editor-check:
    name: Checking Editor build.sha
    if: contains(github.event.client_payload.build_type, 'editors')
    runs-on: ubuntu-latest
    outputs:
      compile: ${{ steps.compile.outputs.should_compile }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/ci_cd
          ref: nightly-testing
          fetch-depth: 1

      - name: Compilation
        if: ${{ github.event.client_payload.force != true }}
        id: compile
        uses: ./.github/actions/version-checker
        with:
          deploy_type: ${{ env.DEPLOY_TYPE }}
          build_type: ${{ github.event.client_payload.type || 'nightly' }}
          build_sha: ${{ inputs.build_sha }}

  template-check:
    name: Checking Templates build.sha
    if: contains(github.event.client_payload.build_type, 'templates')
    runs-on: ubuntu-latest
    outputs:
      compile: ${{ steps.compile.outputs.should_compile == 'true' }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/ci_cd
          ref: nightly-testing
          fetch-depth: 1

      - name: Compilation
        if: ${{ github.event.client_payload.force != true }}
        id: compile
        uses: ./.github/actions/version-checker
        with:
          deploy_type: ${{ env.DEPLOY_TYPE }}
          build_type: ${{ github.event.client_payload.type || 'nightly' }}
          build_sha: ${{ inputs.build_sha }}
          is_template: 'true'


  build-editors:
    runs-on: "macos-latest"
    name: Building ${{ matrix.name }}
    needs: editor-check
    if: ${{ needs.editor-check.outputs.compile == 'true' || github.event.client_payload.force }}
    strategy:
      max-parallel: 1
      fail-fast: false
      matrix:
        include:
          - name: Editor
            cache-name: macos-editor
            target: editor
            sconsflags: ${{ github.event.client_payload.production && 'production=yes' || '' }}
            mono: false

          - name: Editor/w MONO
            cache-name: macos-editor-mono
            target: editor
            sconsflags:  module_mono_enabled=yes ${{ github.event.client_payload.production && 'production=yes' || '' }}
            mono: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/blazium
          ref: ${{ inputs.build_sha }}
          submodules: recursive
          fetch-depth: 2

      - name: Remove existing workflows folder
        run: |
          rm -rf .github/workflows

      - name: Pull .github folder from ci_cd repository
        run: |
          git clone --depth=1 https://github.com/blazium-engine/ci_cd.git ci_cd_repo
          cp -r ci_cd_repo/.github/* .github/
          rm -rf ci_cd_repo

      - name: Update new Version Information to version.py
        uses: ./.github/actions/set-repos-version
        with:
          file_path: ${{ github.workspace }}/version.py
          external_major: ${{ inputs.new_major }}
          external_minor: ${{ inputs.new_minor }}
          external_patch: ${{ inputs.new_patch }}
          external_status: ${{ github.event.client_payload.type || 'nightly' }}
          external_sha: ${{ inputs.build_sha }}

      - name: Notify Cerebro of Build Starting
        uses: ./.github/actions/cerebro-started
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
          build_type: editor
          mono: ${{ matrix.mono }}
          deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
          branch: ${{ github.event.client_payload.branch }}
          build_os: macos
          checksum: ${{ inputs.build_sha }}
          production: ${{ github.event.client_payload.production }}
          version: ${{ inputs.new_version }}

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Download and extract mono-glue
        if: matrix.mono
        run: |
          TYPE=${{ github.event.client_payload.type || 'nightly' }}
          URL="https://cdn.blazium.app/monoglue/${TYPE}/monoglue-${TYPE}.tar.gz"
          
          # Download the file
          curl -L $URL -o monoglue.tar.gz

          # Extract the entire archive to a temporary directory
          mkdir -p temp_extract
          tar -xzvf monoglue.tar.gz -C temp_extract

          # Create target directories if they don't exist
          mkdir -p modules/mono/glue/GodotSharp/GodotSharp
          mkdir -p modules/mono/glue/GodotSharp/GodotSharpEditor

          # Move the extracted folders to their target locations
          rsync -av temp_extract/GodotSharp/ modules/mono/glue/GodotSharp/GodotSharp/
          rsync -av temp_extract/GodotSharpEditor/ modules/mono/glue/GodotSharp/GodotSharpEditor/

          ls -la ./modules/mono/glue/GodotSharp/GodotSharp/
          ls -la ./modules/mono/glue/GodotSharp/GodotSharpEditor/

          # Clean up the temporary directory
          rm -rf temp_extract monoglue.tar.gz

      - name: Setup Vulkan SDK
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh
          ls -la /usr/local

      - name: Editor Compilation (x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} arch=x86_64 ${{ matrix.sconsflags }}
          platform: macos
          target: ${{ matrix.target }}
          tests: false

      - name: Editor Compilation (arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} arch=arm64 ${{ matrix.sconsflags }}
          platform: macos
          target: ${{ matrix.target }}
          tests: false

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Prepare Editor
        run: |
          ls -la ./bin/
          MONO_SUFFIX=""
          if [ "${{ matrix.mono }}" == "true" ]; then
            MONO_SUFFIX=".mono"
          fi

          # Create universal binary
          lipo -create ./bin/blazium.macos.${{ matrix.target }}.x86_64${MONO_SUFFIX} ./bin/blazium.macos.${{ matrix.target }}.arm64${MONO_SUFFIX} -output ./bin/blazium.macos.${{ matrix.target }}.universal${MONO_SUFFIX}

          # Run Mono-specific build script if matrix.mono is true
          if [ "${{ matrix.mono }}" == "true" ]; then
            ./modules/mono/build_scripts/build_assemblies.py --godot-output-dir=./bin --godot-platform=macos
          fi

          # Remove original binaries and strip the universal binary
          rm ./bin/blazium.macos.${{ matrix.target }}.x86_64${MONO_SUFFIX} ./bin/blazium.macos.${{ matrix.target }}.arm64${MONO_SUFFIX}
          strip bin/blazium.*
          chmod +x bin/blazium.*

      - name: Package Editor
        run: |
          MONO_SUFFIX=""
          MONO_FSUFFIX=""
          ENTITLEMENTS_FILE="misc/dist/macos/editor_debug.entitlements"
          
          # Set suffix for Mono if enabled
          if [ "${{ matrix.mono }}" == "true" ]; then
            MONO_SUFFIX="_mono"
            MONO_FSUFFIX=".mono"
          fi

          # Determine the entitlements file based on production flag
          if [ "${{ github.event.client_payload.production }}" == "true" ]; then
            ENTITLEMENTS_FILE="misc/dist/macos/editor.entitlements"
          fi

          # Copy macOS application template and binary
          cp -r misc/dist/macos_tools.app ./Blazium${MONO_SUFFIX}.app
          mkdir -p Blazium${MONO_SUFFIX}.app/Contents/MacOS
          cp bin/blazium.macos.${{ matrix.target }}.universal${MONO_FSUFFIX} Blazium${MONO_SUFFIX}.app/Contents/MacOS/Blazium

          # Copy GodotSharp resources if Mono is enabled
          if [ "${{ matrix.mono }}" == "true" ]; then
            cp -rp ./bin/GodotSharp Blazium${MONO_SUFFIX}.app/Contents/Resources/GodotSharp
          fi

          # Set permissions and sign the application
          chmod +x Blazium${MONO_SUFFIX}.app/Contents/MacOS/Blazium
          codesign --force --timestamp --options=runtime --entitlements $ENTITLEMENTS_FILE -s - Blazium${MONO_SUFFIX}.app

          # Package the application into a zip file
          zip -q -9 -r "Blazium_macos.universal.zip" Blazium${MONO_SUFFIX}.app

      - name: Upload Editor artifact
        run: |
          MONO_SUFFIX=""
          if [ "${{ matrix.mono }}" == "true" ]; then
            MONO_SUFFIX=".mono"
          fi

          echo "ARTIFACT_PATH=./bin/blazium.macos.${{ matrix.target }}.universal${MONO_SUFFIX}" >> $GITHUB_ENV

      - name: Upload Editor artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
          path: ${{ env.ARTIFACT_PATH }}

          
      - name: Upload Packaged Editor artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-packed
          path: Blazium_macos.universal.zip
      
      - name: Create tar.gz Archive
        run: |
          tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz ./Blazium_macos.universal.zip

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}


      - name: Notify Cerebro of Build Success
        if: success() # Only runs if the job was successful
        uses: ./.github/actions/cerebro-completed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          file_url: ${{ secrets.CDN_URL }}/${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          version: ${{ inputs.new_version }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

      - name: Notify Cerebro of Build Failure
        if: failure() || cancelled() # Triggers if the job fails or is canceled
        uses: ./.github/actions/cerebro-failed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

  editor-success:
    name: Editor Success
    needs: build-editors
    runs-on: ubuntu-latest
    steps:

      - name: Create build.sha for Version Verification Later
        run: |
          echo ${{ inputs.build_sha }} >> build.sha

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: build.sha
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}


  build-templates:
    runs-on: "macos-latest"
    name: Building ${{ matrix.name }}
    needs: template-check
    if: ${{ needs.template-check.outputs.compile == 'true' || github.event.client_payload.force }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Template
            cache-name: macos-template
            target: template_release
            mono: false
            sconsflags: debug_symbols=no ${{ github.event.client_payload.production && 'production=yes' || '' }}

          - name: Template/w MONO
            cache-name: macos-template-mono
            target: template_release
            mono: true
            sconsflags: debug_symbols=no module_mono_enabled=yes ${{ github.event.client_payload.production && 'production=yes' || '' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/blazium
          ref: ${{ inputs.build_sha }}
          submodules: recursive
          fetch-depth: 2

      - name: Remove existing workflows folder
        run: |
          rm -rf .github/workflows

      - name: Pull .github folder from ci_cd repository
        run: |
          git clone --depth=1 https://github.com/blazium-engine/ci_cd.git ci_cd_repo
          cp -r ci_cd_repo/.github/* .github/
          rm -rf ci_cd_repo

      - name: Update new Version Information to version.py
        uses: ./.github/actions/set-repos-version
        with:
          file_path: ${{ github.workspace }}/version.py
          external_major: ${{ inputs.new_major }}
          external_minor: ${{ inputs.new_minor }}
          external_patch: ${{ inputs.new_patch }}
          external_status: ${{ github.event.client_payload.type || 'nightly' }}
          external_sha: ${{ inputs.build_sha }}

      - name: Notify Cerebro of Build Starting
        uses: ./.github/actions/cerebro-started
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
          build_type: template
          mono: ${{ matrix.mono }}
          deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
          branch: ${{ github.event.client_payload.branch }}
          build_os: macos
          checksum: ${{ inputs.build_sha }}
          production: ${{ github.event.client_payload.production }}
          version: ${{ inputs.new_version }}


      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Download and extract mono-glue
        if: matrix.mono
        run: |
          TYPE=${{ github.event.client_payload.type || 'nightly' }}
          URL="https://cdn.blazium.app/monoglue/${TYPE}/monoglue-${TYPE}.tar.gz"
          
          # Download the file
          curl -L $URL -o monoglue.tar.gz

          # Extract the entire archive to a temporary directory
          mkdir -p temp_extract
          tar -xzvf monoglue.tar.gz -C temp_extract

          # Create target directories if they don't exist
          mkdir -p modules/mono/glue/GodotSharp/GodotSharp
          mkdir -p modules/mono/glue/GodotSharp/GodotSharpEditor

          # Move the extracted folders to their target locations
          rsync -av temp_extract/GodotSharp/ modules/mono/glue/GodotSharp/GodotSharp/
          rsync -av temp_extract/GodotSharpEditor/ modules/mono/glue/GodotSharp/GodotSharpEditor/

          ls -la ./modules/mono/glue/GodotSharp/GodotSharp/
          ls -la ./modules/mono/glue/GodotSharp/GodotSharpEditor/

          # Clean up the temporary directory
          rm -rf temp_extract monoglue.tar.gz

      - name: Setup Vulkan SDK
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh
          ls -la /usr/local


      - name: Compilation (template_release, arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=arm64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: macos
          target: template_release
          tests: false

      - name: Compilation (template_debug, arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=arm64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: macos
          target: template_debug
          tests: false

      - name: Compilation (template_release, x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=x86_64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: macos
          target: template_release
          tests: false

      - name: Compilation (template_debug, x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=x86_64 ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: macos
          target: template_debug
          tests: false

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Prepare Templates
        run: |
          ls -la ./bin/
          MONO_SUFFIX=""
          if [ "${{ matrix.mono }}" == "true" ]; then
            MONO_SUFFIX=".mono"
          fi

          # Create universal binary
          lipo -create ./bin/blazium.macos.template_release.x86_64${MONO_SUFFIX} ./bin/blazium.macos.template_release.arm64${MONO_SUFFIX} -output ./bin/blazium.macos.template_release.universal${MONO_SUFFIX}
          lipo -create ./bin/blazium.macos.template_debug.x86_64${MONO_SUFFIX} ./bin/blazium.macos.template_debug.arm64${MONO_SUFFIX} -output ./bin/blazium.macos.template_debug.universal${MONO_SUFFIX}

          # Remove original binaries and strip the universal binary
          rm ./bin/blazium.macos.template_release.x86_64${MONO_SUFFIX} ./bin/blazium.macos.template_release.arm64${MONO_SUFFIX} 
          rm ./bin/blazium.macos.template_debug.x86_64${MONO_SUFFIX} ./bin/blazium.macos.template_debug.arm64${MONO_SUFFIX}
          strip bin/blazium.*
          chmod +x bin/blazium.*
          ls -la ./bin/

      - name: Package Templates
        run: |
          MONO_SUFFIX=""
          MONO_FSUFFIX=""
          
          # Set suffix for Mono if enabled
          if [ "${{ matrix.mono }}" == "true" ]; then
            MONO_SUFFIX="_mono"
            MONO_FSUFFIX=".mono"
          fi

          # Copy macOS application template and binary
          cp -r misc/dist/macos_template.app ./macos_template.app
          mkdir -p macos_template.app/Contents/{MacOS,Resources}
          cp bin/blazium.macos.template_release.universal${MONO_FSUFFIX} macos_template.app/Contents/MacOS/blazium_macos_release.universal
          cp bin/blazium.macos.template_debug.universal${MONO_FSUFFIX} macos_template.app/Contents/MacOS/blazium_macos_debug.universal

          # Set permissions and sign the application
          chmod +x macos_template.app/Contents/MacOS/blazium*

          # Package the application into a zip file
          zip -q -9 -r "${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.zip" macos_template.app
          
      
      - name: Create tar.gz Archive
        run: |
          MONO_SUFFIX=""
          
          # Set suffix for Mono if enabled
          if [ "${{ matrix.mono }}" == "true" ]; then
            MONO_SUFFIX="_mono"
          fi

          tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz ./${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.zip

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}

      - name: Notify Cerebro of Build Success
        if: success() # Only runs if the job was successful
        uses: ./.github/actions/cerebro-completed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          file_url: ${{ secrets.CDN_URL }}/${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          version: ${{ inputs.new_version }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

      - name: Notify Cerebro of Build Failure
        if: failure() || cancelled() # Triggers if the job fails or is canceled
        uses: ./.github/actions/cerebro-failed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

  template-success:
    name: Template Success
    needs: build-templates
    runs-on: ubuntu-latest
    steps:

      - name: Create build.sha for Version Verification Later
        run: |
          echo ${{ inputs.build_sha }} >> build.sha

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: build.sha
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}/template

