name: üçè iOS Builds
on:
  workflow_call:
    inputs:
      build_sha:
        description: "Build commit SHA to use for this job"
        required: true
        type: string
      runner_id:
        description: "Runner ID of the Parent Runner"
        required: true
        type: string
      new_major:
        description: "New Major # for Version"
        required: true
        type: string
      new_minor:
        description: "New Minor # for Version"
        required: true
        type: string
      new_patch:
        description: "New Patch # for Version"
        required: true
        type: string
      new_version:
        description: "New Version that'll be Deployed"
        required: true
        type: string

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: blazium-dev
  SCONSFLAGS: verbose=yes warnings=no progress=no
  TERM: xterm
  DEPLOY_TYPE: ios

concurrency:
  group: ci-${{github.actor}}-${{ github.event.client_payload.type || 'nightly' }}-ios
  cancel-in-progress: true

jobs:

  template-check:
    name: Checking Templates build.sha
    if: contains(github.event.client_payload.build_type, 'templates')
    runs-on: ubuntu-latest
    outputs:
      compile: ${{ steps.compile.outputs.should_compile == 'true' }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/ci_cd
          ref: nightly-testing
          fetch-depth: 1

      - name: Compilation
        if: ${{ github.event.client_payload.force != true }}
        id: compile
        uses: ./.github/actions/version-checker
        with:
          deploy_type: ${{ env.DEPLOY_TYPE }}
          build_type: ${{ github.event.client_payload.type || 'nightly' }}
          build_sha: ${{ inputs.build_sha }}
          is_template: 'true'

  build-templates:
    runs-on: macos-latest
    name: Building ${{ matrix.name }}
    needs: template-check
    if: ${{ needs.template-check.outputs.compile == 'true' || github.event.client_payload.force }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Template
            cache-name: ios-template
            sconsflags: ${{ github.event.client_payload.production && 'production=yes use_lto=no' || '' }}
            mono: false

          - name: Template/w MONO
            cache-name: ios-template-mono
            sconsflags: ${{ github.event.client_payload.production && 'production=yes use_lto=no' || '' }}
            mono: true


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/blazium
          ref: ${{ inputs.build_sha }}
          submodules: recursive
          fetch-depth: 2

      - name: Remove existing workflows folder
        run: |
          rm -rf .github/workflows

      - name: Pull .github folder from ci_cd repository
        run: |
          git clone --depth=1 https://github.com/blazium-engine/ci_cd.git ci_cd_repo
          cp -r ci_cd_repo/.github/* .github/
          rm -rf ci_cd_repo

      - name: Update new Version Information to version.py
        uses: ./.github/actions/set-repos-version
        with:
          file_path: ${{ github.workspace }}/version.py
          external_major: ${{ inputs.new_major }}
          external_minor: ${{ inputs.new_minor }}
          external_patch: ${{ inputs.new_patch }}
          external_status: ${{ github.event.client_payload.type || 'nightly' }}
          external_sha: ${{ inputs.build_sha }}

      - name: Notify Cerebro of Build Starting
        uses: ./.github/actions/cerebro-started
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
          build_type: template
          mono: ${{ matrix.mono }}
          deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
          branch: ${{ github.event.client_payload.branch }}
          build_os: ios
          checksum: ${{ inputs.build_sha }}
          production: ${{ github.event.client_payload.production }}
          version: ${{ inputs.new_version }}


      # - uses: maxim-lobanov/setup-xcode@v1
      #   with:
      #     xcode-version: '15.0.1'

      - name: Download and extract MoltenVK
        run: |
          mkdir -p deps/moltenvk
          pushd deps/moltenvk
          curl -L -o moltenvk.tar https://github.com/godotengine/moltenvk-osxcross/releases/download/vulkan-sdk-1.3.283.0-2/MoltenVK-all.tar
          tar xf moltenvk.tar && rm -f moltenvk.tar
          mv MoltenVK/MoltenVK/include/ MoltenVK/
          mv MoltenVK/MoltenVK/static/MoltenVK.xcframework/ MoltenVK/
          popd
          
      - name: Setup Vulkan SDK
        run: |
          sh misc/scripts/install_vulkan_sdk_macos.sh

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Download and extract mono-glue
        if: matrix.mono
        run: |
          TYPE=${{ github.event.client_payload.type || 'nightly' }}
          URL="https://cdn.blazium.app/monoglue/${TYPE}/monoglue-${TYPE}.tar.gz"
          
          # Download the file
          curl -L $URL -o monoglue.tar.gz

          # Extract the entire archive to a temporary directory
          mkdir -p temp_extract
          tar -xzvf monoglue.tar.gz -C temp_extract

          # Create target directories if they don't exist
          mkdir -p modules/mono/glue/GodotSharp/GodotSharp
          mkdir -p modules/mono/glue/GodotSharp/GodotSharpEditor

          # Move the extracted folders to their target locations
          rsync -av temp_extract/GodotSharp/ modules/mono/glue/GodotSharp/GodotSharp/
          rsync -av temp_extract/GodotSharpEditor/ modules/mono/glue/GodotSharp/GodotSharpEditor/

          ls -la ./modules/mono/glue/GodotSharp/GodotSharp/
          ls -la ./modules/mono/glue/GodotSharp/GodotSharpEditor/

          # Clean up the temporary directory
          rm -rf temp_extract monoglue.tar.gz
      
      - name: Compilation (template_release, arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=arm64 ios_simulator=no ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: ios
          target: template_release
          tests: false

      - name: Compilation (template_debug, arm64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=arm64 ios_simulator=no ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: ios
          target: template_debug
          tests: false

      - name: Compilation (template_release, x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=x86_64 ios_simulator=yes ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: ios
          target: template_release
          tests: false

      - name: Compilation (template_debug, x86_64)
        uses: ./.github/actions/godot-build
        with:
          sconsflags: arch=x86_64 ios_simulator=yes ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: ios
          target: template_debug
          tests: false

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        continue-on-error: true

      - name: Setup Template
        run: |
            mkdir -p ./ios/${{ github.event.client_payload.type || 'nightly' }}/templates
            cp bin/libgodot.ios.template_release.arm64.a ./ios/${{ github.event.client_payload.type || 'nightly' }}/templates/libgodot.ios.a
            cp bin/libgodot.ios.template_debug.arm64.a ./ios/${{ github.event.client_payload.type || 'nightly' }}/templates/libgodot.ios.debug.a
            cp bin/libgodot.ios.template_release.x86_64.simulator.a ./ios/${{ github.event.client_payload.type || 'nightly' }}/templates/libgodot.ios.simulator.a
            cp bin/libgodot.ios.template_debug.x86_64.simulator.a ./ios/${{ github.event.client_payload.type || 'nightly' }}/templates/libgodot.ios.debug.simulator.a

      - name: Create Template
        run: |
          rm -rf ios_xcode
          HERE=$(pwd)
          cp -r misc/dist/ios_xcode ios_xcode
          cp "./ios/${{ github.event.client_payload.type || 'nightly' }}/templates/libgodot.ios.simulator.a" ios_xcode/libgodot.ios.release.xcframework/ios-arm64_x86_64-simulator/libgodot.a
          cp "./ios/${{ github.event.client_payload.type || 'nightly' }}/templates/libgodot.ios.debug.simulator.a" ios_xcode/libgodot.ios.debug.xcframework/ios-arm64_x86_64-simulator/libgodot.a
          cp "./ios/${{ github.event.client_payload.type || 'nightly' }}/templates/libgodot.ios.a" ios_xcode/libgodot.ios.release.xcframework/ios-arm64/libgodot.a
          cp "./ios/${{ github.event.client_payload.type || 'nightly' }}/templates/libgodot.ios.debug.a" ios_xcode/libgodot.ios.debug.xcframework/ios-arm64/libgodot.a
          cp -r deps/moltenvk/MoltenVK/MoltenVK.xcframework ios_xcode/
          rm -rf ios_xcode/MoltenVK.xcframework/{macos,tvos}*
          cd ios_xcode
          zip -q -9 -r "${HERE}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.zip" *
          cd "${HERE}"
          tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.zip

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}/template


      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          path: "./ios.zip"

      - name: Notify Cerebro of Build Success
        if: success() # Only runs if the job was successful
        uses: ./.github/actions/cerebro-completed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          file_url: ${{ secrets.CDN_URL }}/${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}/template/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          version: ${{ inputs.new_version }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

      - name: Notify Cerebro of Build Failure
        if: failure() || cancelled() # Triggers if the job fails or is canceled
        uses: ./.github/actions/cerebro-failed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

  template-success:
    name: Template Success
    needs: build-templates
    runs-on: ubuntu-latest
    steps:

      - name: Create build.sha for Version Verification Later
        run: |
          echo ${{ inputs.build_sha }} >> build.sha

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: build.sha
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}/template
