name: 🌐 Web Builds
on:
  workflow_call:
    inputs:
      build_sha:
        description: "Build commit SHA to use for this job"
        required: true
        type: string
      runner_id:
        description: "Runner ID of the Parent Runner"
        required: true
        type: string
      new_major:
        description: "New Major # for Version"
        required: true
        type: string
      new_minor:
        description: "New Minor # for Version"
        required: true
        type: string
      new_patch:
        description: "New Patch # for Version"
        required: true
        type: string
      new_version:
        description: "New Version that'll be Deployed"
        required: true
        type: string

# Global Settings
env:
  # Used for the cache key. Add version suffix to force clean build.
  GODOT_BASE_BRANCH: blazium-dev
  SCONSFLAGS: verbose=yes warnings=no progress=no
  EM_VERSION: 3.1.64
  EM_CACHE_FOLDER: "emsdk-cache"
  DEPLOY_TYPE: web-editor

concurrency:
  group: ci-${{github.actor}}-${{ github.event.client_payload.type || 'nightly' }}-web
  cancel-in-progress: true
  
jobs:

  editor-check:
    name: Checking Editor build.sha
    if: contains(github.event.client_payload.build_type, 'editors')
    runs-on: ubuntu-latest
    outputs:
      compile: ${{ steps.compile.outputs.should_compile }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/ci_cd
          ref: nightly-testing
          fetch-depth: 1

      - name: Compilation
        if: ${{ github.event.client_payload.force != true }}
        id: compile
        uses: ./.github/actions/version-checker
        with:
          deploy_type: ${{ env.DEPLOY_TYPE }}
          build_type: ${{ github.event.client_payload.type || 'nightly' }}
          build_sha: ${{ inputs.build_sha }}

  template-check:
    name: Checking Templates build.sha
    if: contains(github.event.client_payload.build_type, 'templates')
    runs-on: ubuntu-latest
    outputs:
      compile: ${{ steps.compile.outputs.should_compile == 'true' }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/ci_cd
          ref: nightly-testing
          fetch-depth: 1

      - name: Compilation
        if: ${{ github.event.client_payload.force != true }}
        id: compile
        uses: ./.github/actions/version-checker
        with:
          deploy_type: ${{ env.DEPLOY_TYPE }}
          build_type: ${{ github.event.client_payload.type || 'nightly' }}
          build_sha: ${{ inputs.build_sha }}
          is_template: 'true'

  build-editors:
    #runs-on: "ubuntu-22.04"
    name: ${{ matrix.name }}
    runs-on: pogr-sponsored
    needs: editor-check
    if: ${{ needs.editor-check.outputs.compile == 'true' || github.event.client_payload.force }}
    strategy:
      fail-fast: true
      matrix:
        include:

          - name: Editor (target=editor)
            cache-name: web-editor
            target: editor
            sconsflags: use_closure_compiler=yes ${{ github.event.client_payload.production && 'production=yes' || '' }} 

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/blazium
          ref: ${{ inputs.build_sha }}
          submodules: recursive
          fetch-depth: 2

      - name: Remove existing workflows folder
        run: |
          rm -rf .github/workflows

      - name: Pull .github folder from ci_cd repository
        run: |
          git clone --depth=1 https://github.com/blazium-engine/ci_cd.git ci_cd_repo
          cp -r ci_cd_repo/.github/* .github/
          rm -rf ci_cd_repo

      - name: Update new Version Information to version.py
        uses: ./.github/actions/set-repos-version
        with:
          file_path: ${{ github.workspace }}/version.py
          external_major: ${{ inputs.new_major }}
          external_minor: ${{ inputs.new_minor }}
          external_patch: ${{ inputs.new_patch }}
          external_status: ${{ github.event.client_payload.type || 'nightly' }}
          external_sha: ${{ inputs.build_sha }}

      - name: Notify Cerebro of Build Starting
        uses: ./.github/actions/cerebro-started
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
          build_type: ${{ startsWith(matrix.target, 'template_') && 'template' || 'editor' }}
          mono: ${{ matrix.mono || false }}
          deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
          branch: ${{ github.event.client_payload.branch }}
          build_os: web
          checksum: ${{ inputs.build_sha }}
          production: ${{ github.event.client_payload.production }}
          version: ${{ inputs.new_version }}

      - name: Set up Emscripten latest
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
          cache-key: emsdk-${{ matrix.cache-name }}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}

      - name: Verify Emscripten setup
        run: |
          emcc -v

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: web
          target: ${{ matrix.target }}

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
      - name: Create tar.gz Archive
        run: |
          tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz -C ./bin .

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}

      - name: Notify Cerebro of Build Success
        if: success() # Only runs if the job was successful
        uses: ./.github/actions/cerebro-completed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          file_url: ${{ secrets.CDN_URL }}/${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          version: ${{ inputs.new_version }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

      - name: Notify Cerebro of Build Failure
        if: failure() || cancelled() # Triggers if the job fails or is canceled
        uses: ./.github/actions/cerebro-failed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

  editor-success:
    name: Editor Success
    needs: build-editors
    runs-on: ubuntu-latest
    steps:

      - name: Create build.sha for Version Verification Later
        run: |
          echo ${{ inputs.build_sha }} >> build.sha

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: build.sha
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}

  build-templates:
    runs-on: "ubuntu-22.04"
    name: ${{ matrix.name }}
    needs: template-check
    if: ${{ needs.template-check.outputs.compile == 'true' || github.event.client_payload.force }}
    strategy:
      fail-fast: true
      matrix:
        include:

          - name: Template w/ threads (target=template_release, threads=yes)
            cache-name: web-template
            target: template_release
            sconsflags: threads=yes ${{ github.event.client_payload.production && 'production=yes' || '' }}

          - name: Template w/o threads (target=template_release, threads=no)
            cache-name: web-nothreads-template
            target: template_release
            sconsflags: threads=no ${{ github.event.client_payload.production && 'production=yes' || '' }}

          - name: Template w/ threads (target=template_debug, threads=yes)
            cache-name: web-debug-template
            target: template_debug
            sconsflags: threads=yes ${{ github.event.client_payload.production && 'production=yes' || '' }}

          - name: Template w/o threads (target=template_debug, threads=no)
            cache-name: web-nothreads-debug-template
            target: template_debug
            sconsflags: threads=no ${{ github.event.client_payload.production && 'production=yes' || '' }}

          - name: Template w/ threads (target=template_release, dlink_enabled=yes, threads=yes)
            cache-name: web-dlink-template
            target: template_release
            sconsflags: threads=yes dlink_enabled=yes ${{ github.event.client_payload.production && 'production=yes' || '' }}

          - name: Template w/o threads (target=template_release, dlink_enabled=yes, threads=no)
            cache-name: web-nothreads-dlink-template
            target: template_release
            sconsflags: threads=no dlink_enabled=yes ${{ github.event.client_payload.production && 'production=yes' || '' }}

          - name: Template w/ threads (target=template_debug, dlink_enabled=yes, threads=yes)
            cache-name: web-dlink-debug-template
            target: template_debug
            sconsflags: threads=yes dlink_enabled=yes ${{ github.event.client_payload.production && 'production=yes' || '' }}

          - name: Template w/o threads (target=template_debug, dlink_enabled=yes, threads=no)
            cache-name: web-nothreads-dlink-debug-template
            target: template_debug
            sconsflags: threads=no dlink_enabled=yes ${{ github.event.client_payload.production && 'production=yes' || '' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: blazium-engine/blazium
          ref: ${{ inputs.build_sha }}
          submodules: recursive
          fetch-depth: 2

      - name: Remove existing workflows folder
        run: |
          rm -rf .github/workflows

      - name: Pull .github folder from ci_cd repository
        run: |
          git clone --depth=1 https://github.com/blazium-engine/ci_cd.git ci_cd_repo
          cp -r ci_cd_repo/.github/* .github/
          rm -rf ci_cd_repo

      - name: Update new Version Information to version.py
        uses: ./.github/actions/set-repos-version
        with:
          file_path: ${{ github.workspace }}/version.py
          external_major: ${{ inputs.new_major }}
          external_minor: ${{ inputs.new_minor }}
          external_patch: ${{ inputs.new_patch }}
          external_status: ${{ github.event.client_payload.type || 'nightly' }}
          external_sha: ${{ inputs.build_sha }}

      - name: Notify Cerebro of Build Starting
        uses: ./.github/actions/cerebro-started
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}
          build_type: ${{ startsWith(matrix.target, 'template_') && 'template' || 'editor' }}
          mono: ${{ matrix.mono || false }}
          deploy_type: ${{ github.event.client_payload.type || 'nightly' }}
          branch: ${{ github.event.client_payload.branch }}
          build_os: web
          checksum: ${{ inputs.build_sha }}
          production: ${{ github.event.client_payload.production }}
          version: ${{ inputs.new_version }}

      - name: Set up Emscripten latest
        uses: mymindstorm/setup-emsdk@v14
        with:
          version: ${{env.EM_VERSION}}
          actions-cache-folder: ${{env.EM_CACHE_FOLDER}}
          cache-key: emsdk-${{ matrix.cache-name }}-${{env.GODOT_BASE_BRANCH}}-${{github.ref}}-${{github.sha}}

      - name: Verify Emscripten setup
        run: |
          emcc -v

      - name: Restore Godot build cache
        uses: ./.github/actions/godot-cache-restore
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Setup Python and SCons
        uses: ./.github/actions/godot-deps

      - name: Compilation
        uses: ./.github/actions/godot-build
        with:
          sconsflags: ${{ env.SCONSFLAGS }} ${{ matrix.sconsflags }}
          platform: web
          target: ${{ matrix.target }}

      - name: Save Godot build cache
        uses: ./.github/actions/godot-cache-save
        with:
          cache-name: ${{ matrix.cache-name }}
        continue-on-error: true

      - name: Upload artifact
        uses: ./.github/actions/upload-artifact
        with:
          name: ${{ matrix.cache-name }}
      - name: Create tar.gz Archive
        run: |
          tar -czvf ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz -C ./bin .

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}

      - name: Notify Cerebro of Build Success
        if: success() # Only runs if the job was successful
        uses: ./.github/actions/cerebro-completed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          file_url: ${{ secrets.CDN_URL }}/${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}${{ startsWith(matrix.target, 'template_') && '/template' || '' }}/${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}.tar.gz
          version: ${{ inputs.new_version }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

      - name: Notify Cerebro of Build Failure
        if: failure() || cancelled() # Triggers if the job fails or is canceled
        uses: ./.github/actions/cerebro-failed
        with:
          name: ${{ matrix.cache-name }}-${{ github.event.client_payload.type || 'nightly' }}
          run_id: ${{ inputs.runner_id }}
          cerebro_url: ${{ secrets.CEREBRO_URL }}
          cerebro_auth: ${{ secrets.BLAZIUM_AUTH }}

  template-success:
    name: Template Success
    needs: build-templates
    runs-on: ubuntu-latest
    steps:

      - name: Create build.sha for Version Verification Later
        run: |
          echo ${{ inputs.build_sha }} >> build.sha

      - uses: BetaHuhn/do-spaces-action@v2
        with:
          access_key: ${{ secrets.DO_ACCESS_KEY }}
          secret_key: ${{ secrets.DO_SECRET_KEY }}
          space_name: ${{ secrets.DO_SPACE_NAME }}
          space_region: ${{ secrets.DO_SPACE_REGION }}
          source: build.sha
          out_dir: ${{ env.DEPLOY_TYPE }}/${{ github.event.client_payload.type || 'nightly' }}/template

